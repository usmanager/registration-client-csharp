/* 
 * Registration-client-api
 *
 * Interage com o registration server (eureka) para registar esta instância ou obter servidores com o qual pode comunicar
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Pt.Unl.Fct.Miei.Usmanagement.Manager.Client;
using Pt.Unl.Fct.Miei.Usmanagement.Manager.Model;

namespace Pt.Unl.Fct.Miei.Usmanagement.Manager.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEndpointsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Endpoint</returns>
        Endpoint GetServiceEndpoint (string service);

        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>ApiResponse of Endpoint</returns>
        ApiResponse<Endpoint> GetServiceEndpointWithHttpInfo (string service);
        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>List&lt;Endpoint&gt;</returns>
        List<Endpoint> GetServiceEndpoints (string service);

        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>ApiResponse of List&lt;Endpoint&gt;</returns>
        ApiResponse<List<Endpoint>> GetServiceEndpointsWithHttpInfo (string service);
        /// <summary>
        /// Regista o endpoint no servidor eureka
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void RegisterEndpoint ();

        /// <summary>
        /// Regista o endpoint no servidor eureka
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterEndpointWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of Endpoint</returns>
        System.Threading.Tasks.Task<Endpoint> GetServiceEndpointAsync (string service);

        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of ApiResponse (Endpoint)</returns>
        System.Threading.Tasks.Task<ApiResponse<Endpoint>> GetServiceEndpointAsyncWithHttpInfo (string service);
        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of List&lt;Endpoint&gt;</returns>
        System.Threading.Tasks.Task<List<Endpoint>> GetServiceEndpointsAsync (string service);

        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of ApiResponse (List&lt;Endpoint&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Endpoint>>> GetServiceEndpointsAsyncWithHttpInfo (string service);
        /// <summary>
        /// Regista o endpoint no servidor eureka
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterEndpointAsync ();

        /// <summary>
        /// Regista o endpoint no servidor eureka
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterEndpointAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EndpointsApi : IEndpointsApi
    {
        private Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EndpointsApi(String basePath)
        {
            this.Configuration = new Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EndpointsApi(Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Endpoint</returns>
        public Endpoint GetServiceEndpoint (string service)
        {
             ApiResponse<Endpoint> localVarResponse = GetServiceEndpointWithHttpInfo(service);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>ApiResponse of Endpoint</returns>
        public ApiResponse< Endpoint > GetServiceEndpointWithHttpInfo (string service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling EndpointsApi->GetServiceEndpoint");

            var localVarPath = "/services/{service}/endpoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (service != null) localVarPathParams.Add("service", this.Configuration.ApiClient.ParameterToString(service)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Endpoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Endpoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Endpoint)));
        }

        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of Endpoint</returns>
        public async System.Threading.Tasks.Task<Endpoint> GetServiceEndpointAsync (string service)
        {
             ApiResponse<Endpoint> localVarResponse = await GetServiceEndpointAsyncWithHttpInfo(service);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtém o melhor endpoint para o serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of ApiResponse (Endpoint)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Endpoint>> GetServiceEndpointAsyncWithHttpInfo (string service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling EndpointsApi->GetServiceEndpoint");

            var localVarPath = "/services/{service}/endpoint";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (service != null) localVarPathParams.Add("service", this.Configuration.ApiClient.ParameterToString(service)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Endpoint>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Endpoint) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Endpoint)));
        }

        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>List&lt;Endpoint&gt;</returns>
        public List<Endpoint> GetServiceEndpoints (string service)
        {
             ApiResponse<List<Endpoint>> localVarResponse = GetServiceEndpointsWithHttpInfo(service);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>ApiResponse of List&lt;Endpoint&gt;</returns>
        public ApiResponse< List<Endpoint> > GetServiceEndpointsWithHttpInfo (string service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling EndpointsApi->GetServiceEndpoints");

            var localVarPath = "/services/{service}/endpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (service != null) localVarPathParams.Add("service", this.Configuration.ApiClient.ParameterToString(service)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceEndpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Endpoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Endpoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Endpoint>)));
        }

        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of List&lt;Endpoint&gt;</returns>
        public async System.Threading.Tasks.Task<List<Endpoint>> GetServiceEndpointsAsync (string service)
        {
             ApiResponse<List<Endpoint>> localVarResponse = await GetServiceEndpointsAsyncWithHttpInfo(service);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtém todos os endpoints registados em nome do serviço {service} 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service name</param>
        /// <returns>Task of ApiResponse (List&lt;Endpoint&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Endpoint>>> GetServiceEndpointsAsyncWithHttpInfo (string service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling EndpointsApi->GetServiceEndpoints");

            var localVarPath = "/services/{service}/endpoints";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (service != null) localVarPathParams.Add("service", this.Configuration.ApiClient.ParameterToString(service)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetServiceEndpoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Endpoint>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Endpoint>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Endpoint>)));
        }

        /// <summary>
        /// Regista o endpoint no servidor eureka 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void RegisterEndpoint ()
        {
             RegisterEndpointWithHttpInfo();
        }

        /// <summary>
        /// Regista o endpoint no servidor eureka 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterEndpointWithHttpInfo ()
        {

            var localVarPath = "/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Regista o endpoint no servidor eureka 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterEndpointAsync ()
        {
             await RegisterEndpointAsyncWithHttpInfo();

        }

        /// <summary>
        /// Regista o endpoint no servidor eureka 
        /// </summary>
        /// <exception cref="Pt.Unl.Fct.Miei.Usmanagement.Manager.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterEndpointAsyncWithHttpInfo ()
        {

            var localVarPath = "/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterEndpoint", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
